require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

ENV['RCT_NEW_ARCH_ENABLED'] = '0' if podfile_properties['newArchEnabled'] == 'false'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'
install! 'cocoapods',
  :deterministic_uuids => false

prepare_react_native_project!

# ✅ Static frameworks for Firebase interop pods
static_frameworks = [
  'FirebaseAuthInterop',
  'FirebaseAppCheckInterop',
  'FirebaseCore',
  'FirebaseCoreExtension',
  'GoogleUtilities',
  'RecaptchaInterop',
  'FirebaseCoreInternal',
  'FirebaseInstallations',
  'GoogleDataTransport',
  'nanopb',
  'FirebaseAuth'
]

pre_install do |installer|
  installer.pod_targets.each do |pod|
    if static_frameworks.include?(pod.name)
      puts "Configuring #{pod.name} as static framework"
      def pod.build_type
        Pod::BuildType.new(:linkage => :static, :packaging => :framework)
      end
    end
  end
end

target 'surfSUP' do
  use_expo_modules!

  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"]
  else
    config_command = [
      'npx',
      'expo-modules-autolinking',
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
  end

  config = use_native_modules!(config_command)

  use_frameworks! :linkage => podfile_properties['ios.useFrameworks'].to_sym if podfile_properties['ios.useFrameworks']
  use_frameworks! :linkage => ENV['USE_FRAMEWORKS'].to_sym if ENV['USE_FRAMEWORKS']

  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'] == nil || podfile_properties['expo.jsEngine'] == 'hermes',
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  # ✅ Ensure RNFBApp native module is linked
  pod 'RNFBApp', :path => '../node_modules/@react-native-firebase/app'
  pod 'RNFBAuth', :path => '../node_modules/@react-native-firebase/auth'

  # You can also explicitly add any other Firebase pods you are using:
  pod 'FirebaseAuth'
  pod 'FirebaseAuthInterop'
  pod 'FirebaseAppCheckInterop'
  pod 'FirebaseCore'
  pod 'FirebaseCoreExtension'
  pod 'FirebaseCoreInternal'
  pod 'GoogleUtilities'
  pod 'RecaptchaInterop'
  pod 'nanopb'
  pod 'FirebaseABTesting'
  pod 'FirebaseInstallations'
  pod 'GoogleDataTransport'

  post_install do |installer|
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
    )

    # ✅ Fix Swift import + code signing issues
    installer.pods_project.targets.each do |target|
      target.build_configurations.each do |config|
        config.build_settings['SWIFT_VERSION'] = '5.0'
        config.build_settings['DEFINES_MODULE'] = 'YES'
      end
    end

    installer.target_installation_results.pod_target_installation_results
      .each do |pod_name, target_installation_result|
      target_installation_result.resource_bundle_targets.each do |resource_bundle_target|
        resource_bundle_target.build_configurations.each do |config|
          config.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end
  end
end

